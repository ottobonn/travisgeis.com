{
    "componentChunkName": "component---src-pages-post-slug-tsx",
    "path": "/2012/06/10/wall-e-the-linux-based-robot-pet/",
    "result": {"data":{"post":{"slug":"2012/06/10/wall-e-the-linux-based-robot-pet","title":"Wall-E: The Linux-Based Robot Pet","date":"10 June 2012","parent":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Wall-E: The Linux-Based Robot Pet\",\n  \"url\": \"481.html\",\n  \"id\": 481,\n  \"categories\": [\"Electronics\", \"Wall-E\"],\n  \"date\": \"2012-06-10T01:31:26.000Z\",\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I decided recently to embark on a new robotics project. I bought a BeagleBone, a\\nsmall Linux computer running the Angstrom distro, because I want to make a\\nWall-E robot with computer vision capabilities.\"), mdx(\"p\", null, \"Initially, I thought about powering the mechanisms with an AVR, and offloading\\nthe processing to my laptop. I could use \\xA0a networked camera and connect the AVR\\nover Bluetooth or WiFi to relay commands. But I rally want Wall-E to be able to\\nmake his own decisions, even when my laptop is busy with other things.\"), mdx(\"p\", null, \"The BeagleBone should have more than enough power for what I\\u2019m doing. It has a\\nUSB host, so I can hook up a WiFi dongle, a webcam, and potentially a USB-based\\nAVR motor controller. USB cameras are extraordinarily cheap compared to similar\\nmodels that expose TTL signals for microcontrollers (ah, the wonders of\\nmass-production).\"), mdx(\"h2\", null, \"The Plan\"), mdx(\"p\", null, \"First I scoured the internets and failed to find new Wall-E toys for use in my\\nproject. Unfortunately, it seems Pixar has discontinued the adorable line of\\ntoys. Who wouldn\\u2019t want a Wall-E to play with? I ended up on eBay in bidding\\nwars with other Wall-E fans and the formidable collectors. I bought a Wall-E\\n\\u201CInterActive\\u201D toy, which basically makes noise when you push it around and may\\nor may not have motors in it. The cubic torso is about 5\\u201D on a side, so\\nhopefully I can fit my electronics in there.\"), mdx(\"p\", null, \"I will rip open the plastic enclosure and remove the battery holder, the noise\\ncircuits, etc., and supplant them with my BeagleBone and a better battery pack.\\nI may put servos in the binoculars, for emotion, and perhaps one at the base of\\neach arm. I will put DC gearmotors on the track wheels, assuming the ones in the\\ntoy are lousy. I plan to make an I2C motor controller based on the AVR to\\nsimplify programming the kinematics.\"), mdx(\"h2\", null, \"The Parts\"), mdx(\"p\", null, \"I bought\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.amazon.com/gp/product/B004BDOR8I/\",\n    \"title\": \"Syba Webcam on Amazon\"\n  }, \"a cheap webcam\"), \"\\nfrom Syba via Amazon, and took out its innards. It turned out to be a well-built\\nPCB for $8, and it works out of the box with Linux. I plan to mount it in one of\\nWall-E\\u2019s eyes. I haven\\u2019t seen the toy yet, so I hope the camera will fit in an\\neye.\"), mdx(\"p\", null, \"I already mentioned the BeagleBone, an ARMv7-based board devloped with help from\\nTI by the folks behind BeagleBoard. I already have the Bone running WiFi via the\\nadapter from Adafruit, and I have confirmed that the Syba camera works with the\\nAngstrom flavor of Linux with ffmpeg. I am trying to set up video streaming for\\nremote monitoring.\"), mdx(\"p\", null, \"I still need to work on the battery, which will likely be a rechargeable hobby\\nunit. I want to put together a buck regulator for a clean 5V, an potentially\\ninclude some kind of power management system to monitor the battery status.\\nWall-E shouldn\\u2019t run out of juice without knowing about it!\"), mdx(\"p\", null, \"For the servos I picked up an Adafruit I2C servo driver, which has 16 channels\\nof PWM from dedicated hardware. The extra cost is justified considering how\\ncomplicated PWM from Linux can get. The less time I spend debugging code the\\nbetter.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2}}},"pageContext":{"id":"daf586f3-b6a8-53ce-90ea-504c25d0e7bf","slug":"2012/06/10/wall-e-the-linux-based-robot-pet","__params":{"slug":"2012"}}},
    "staticQueryHashes": []}