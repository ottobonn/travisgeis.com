{
    "componentChunkName": "component---src-pages-post-slug-tsx",
    "path": "/2012/06/24/rethinking-the-alarm-clock/",
    "result": {"data":{"post":{"slug":"2012/06/24/rethinking-the-alarm-clock","title":"Rethinking the Alarm Clock","date":"24 June 2012","parent":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Rethinking the Alarm Clock\",\n  \"url\": \"484.html\",\n  \"id\": 484,\n  \"categories\": [\"A Clock\"],\n  \"date\": \"2012-06-24T13:59:41.000Z\",\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I interact with my alarm clock every day. It wakes me up in the morning, and\\nbecause I get up at different times each day depending on what I need to do, I\\nend up setting the alarm time again almost every night. I have been thinking\\nabout device design and the user experience of an alarm clock, and I have some\\nidea that may make it into a new prototype I\\u2019m building. The device I have in\\nmind isn\\u2019t\\xA0really\\xA0cost-effective\\u2014It won\\u2019t compete with the bargain-basement\\nplastic clocks pouring out of China\\u2014but I would like to explore some new design\\nideas.\"), mdx(\"h2\", null, \"Problems with Other Clocks\"), mdx(\"p\", null, \"The clock I use every day is bare-bones. I like it, because it has multi-colored\\nseven-segment displays. But the interface for setting and checking the time and\\nalarm settings is the seemingly-standard four buttons: time and alarm buttons;\\nand hour and minute buttons.\"), mdx(\"p\", null, \"The interface is admirably simple, driven to extremes by the competition for\\nlower prices. But it requires two hands to use, and to setting a time earlier\\nthan the one programmed in the clock is annoying. There is no way to go back;\\nthe user must go \\u201Caround the horn\\u201D to choose a new time. Simply holding the\\nbuttons down doesn\\u2019t work, either: the clock counts forward so slowly that my\\nfinger cramps from holding the button for so long. So I end up pressing the\\nbuttons as quickly as I can, and if I miss the minute I need, it\\u2019s another fifty\\nnine clicks to get back around. That\\u2019s annoying!\"), mdx(\"p\", null, \"I also generally find myself frustrated with the lack of clarity as to whether\\nthe alarm is even active. The designers usually hide the alarm switch on the\\nside or back of the clock, so if you don\\u2019t want to snooze, you\\u2019ll have to flip\\nthe flimsy switch until the evening.\"), mdx(\"h2\", null, \"My Goals\"), mdx(\"p\", null, \"I would like to create the simplest and fastest interface I can. I have many\\nthoughts about how to do so, but some ideas are central. Here\\u2019s the breakdown:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Choosing a time is a continuous action. Time (at least as clocks portray it)\\nis linear, and the user needs to be able to find a time in the continuum quickly\\nand easily. For this task, I have in mind a rotary encoder, like a modern volume\\nknob. The detents should be gentle and smooth, and fairly close together so\\ngoing through sixty click doesn\\u2019t take too much effort.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Clocks are important at night, so the screen needs to light up. I don\\u2019t want\\nto press anything to see what time it is, and I surely don\\u2019t want to turn on a\\nlamp to see the time. I want to know, still in the dark, whether the alarm is\\non, what time it is now, and whether the clock thinks it is currently morning or\\nnight.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The clock needs to survive a small power outage. If I have just fallen\\nasleep, a power outage is not going to wake me up. And if the clock doesn\\u2019t wake\\nme, nothing will. So I need the clock to remember the time for about twelve\\nhours when it\\u2019s off wall power, and still sound the alarm when I have to get up.\\nIt doesn\\u2019t have to show the time if that takes too much energy, but it does have\\nto wake me up.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The alarm switch and buttons need to feel good. I want a solid click, not a\\nwimpy squish.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The clock needs to look nice. Ugly appliances are garbage.\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2}}},"pageContext":{"id":"2a57bb7d-f9e9-5b1d-be5d-db608d94f740","slug":"2012/06/24/rethinking-the-alarm-clock","__params":{"slug":"2012"}}},
    "staticQueryHashes": []}