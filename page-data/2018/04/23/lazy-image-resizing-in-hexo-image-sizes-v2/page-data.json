{
    "componentChunkName": "component---src-pages-post-slug-tsx",
    "path": "/2018/04/23/lazy-image-resizing-in-hexo-image-sizes-v2/",
    "result": {"data":{"post":{"slug":"2018/04/23/lazy-image-resizing-in-hexo-image-sizes-v2","title":"Lazy image resizing in hexo-image-sizes v2","date":"23 April 2018","parent":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Lazy image resizing in hexo-image-sizes v2\",\n  \"tags\": [\"javascript\", \"hexo\"],\n  \"project\": \"hexo-image-sizes\",\n  \"date\": \"2018-04-23T19:18:43.000Z\",\n  \"lede\": \"Version 2 of the plugin only resizes the images that actually appear in the blog.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I just released \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ottobonn/hexo-image-sizes\"\n  }, \"version 2 of\\n\", mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"hexo-image-sizes\")), \", which\\nrepresents a complete rewrite of the plugin. It finally supports lazy image\\nresizing. In this post, I will cover the high-level design ideas behind the new\\nversion and some of the challenges in making it.\"), mdx(\"p\", null, \"Check out my \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/2017/03/03/optimizing-image-sizes-in-hexo/\"\n  }, \"first post on it\"), \" for\\nmore background on the functionality.\"), mdx(\"h2\", null, \"Lazy image resizing with imsize tags\"), mdx(\"p\", null, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"hexo-image-sizes\"), \" uses a special tag format for adding images to posts in Hexo.\\nUsers add an \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" tag to their post when they want to use an image with the\\nplugin, and in the tag they can specify various details of the image including\\nits size profile, its alt text, its link target, and more.\"), mdx(\"p\", null, \"Here\\u2019s an example use of \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" within a markdown post:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"![Arduino Duemilanove](../uploads/2010/06/ArduinoDuemilanove.jpeg)\"), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"When Hexo renders a post containing an \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" tag, it invokes the tag\\u2019s\\nregistered function. The tag function has access to the user\\u2019s arguments and\\nsome context information including the current page on which it appears, which\\nwill be important for resolving filenames.\"), mdx(\"p\", null, \"The \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" tag affords the plugin a special ability. Because users must invoke\\nthe tag when they want to embed a resized image in their post,\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"hexo-image-sizes\"), \" can monitor exactly which images the user has actually made\\nvisible in his or her posts. The new version of the plugin exploits this fact to\\navoid resizing images that the user never makes visible on the site.\"), mdx(\"p\", null, \"The plugin\\u2019s operation now comprises two distinct phases during static site\\ngeneration:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"First, while Hexo renders each post on the site, the plugin monitors all the\\n\", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" tags the user includes in posts. Each time the user includes an\\n\", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" tag, the plugin records which image the user included and the desired\\nnew size in a cache in memory.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After Hexo has processed all of the posts in the site, the plugin knows\\nwhich images the user wants to make visible. It generates resized versions of\\neach visible image.\")), mdx(\"h2\", null, \"Using Hexo\\u2019s router to avoid filesystem manipulation\"), mdx(\"p\", null, \"Hexo has a router module responsible for tracking which files are in use on the\\nsite and what their contents should be. The router is a map from the path of\\nthe file (relative to the Hexo site\\u2019s public output directory) to a stream\\nof the contents of the file.\"), mdx(\"p\", null, \"The documentation for the router is missing some important details. First, it\\u2019s\\nvery important to know that each route corresponds to a a file in the public\\ndirectory and not in the source directory. Therefore, if you add a route, you\\nwill add a file to the public site but not alter the source directory. When I\\nfirst began work on this plugin, I assumed that the routes referenced files in\\nthe source directory. I learned about using the router from a similar plugin,\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/hexojs/hexo-filter-responsive-images\"\n  }, \"hexo-filter-responsive-images\"), \".\"), mdx(\"p\", null, \"Using the router to add new resized images to the public output of the site\\ngenerator has several advantages. By getting each file\\u2019s contents from the route\\nstream managed by the router, my plugin can start to cooperate with other\\nasset-management plugins, like image filters and minifiers. Using the router\\nalso allows me to remove the hacky filesystem code I was using before, where\\nI had to guess the output location of each file and create the directory\\nstructure there.\"), mdx(\"p\", null, \"Using the router also has a downside. I\\u2019m using\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/lovell/sharp\"\n  }, \"sharp\"), \" to resize the images, and it takes as\\ninput either a file or a Buffer of image data, while the router provides a\\nstream for each file. To run the image through \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"sharp\"), \", I have to read the full\\nfile stream into memory (in a Buffer), which adds a lot to the memory use of the\\nplugin. In its original form, the plugin would invoke sharp with file pointers\\ninstead of file contents, which meant that only \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"sharp\"), \" would need to see the\\nfull contents of the image, outside of the JavaScript VM. For my site, the\\nincreased memory use has not been an issue.\"), mdx(\"h2\", null, \"Keeping Hexo running until all images are resized\"), mdx(\"p\", null, \"I discovered that running Hexo in server mode with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"hexo server\"), \" can behave\\ndifferently than running it to generate files and quit with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"hexo generate\"), \". My\\nsite would generate without issue when running the server, but \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"hexo generate\"), \"\\nwould only produce a few of the necessary images.\"), mdx(\"p\", null, \"The problem was with my \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"after_generate\"), \" filter function. Hexo uses the return\\nvalue of filters to determine when they are finished running, and my filter\\nwasn\\u2019t returning anything. When Hexo was running in server mode, it would keep\\nrunning indefinitely, long enough to allow my plugin to finish resizing\\neverything. In generate mode, it would exit as my plugin was just starting,\\nbecause my filter function seemed to run synchronously.\"), mdx(\"p\", null, \"To fix the issue, I simply return a Promise from the filter function. The\\nPromise resolves when every image has been resized.\"), mdx(\"h2\", null, \"Normalizing file paths throughout the application\"), mdx(\"p\", null, \"Hexo uses several different types of file path, and mixing them was hindering\\nmy development of the plugin for a while. The following paths are involved in\\nresizing an image:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The path the user put in the \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"imsize\"), \" tag, which could be:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Absolute (with a leading slash), meaning it references the Hexo source\\ndirectory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Relative (no leading slash), meaning it is relative to the current post:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the current post is a blog post and has an asset directory\\n(\", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"post_asset_folder\"), \") is true  in Hexo config, then the path starts in the\\nasset directory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the current post is not a blog post or \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"post_asset_folder\"), \" is false,\\nthen the path starts in the directory of the post file.\")))))), mdx(\"p\", null, \"The plugin also has access to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The absolute path to Hexo\\u2019s source directory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The absolute path to the current post\\u2019s source file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The absolute path to the current post\\u2019s asset directory, if there is one\")), mdx(\"p\", null, \"The plugin computes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A relative path from Hexo\\u2019s source directory to the image the user wants to\\nresize. For example, a cat picture might have path \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"/posts/2018-cats/cat1.jpg\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A copy of that relative path with the image renamed to have its profile name\\nas a prefix. For example, a thumbnail-sized version of the above cat picture\\nmight have path \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"/posts/2018-cats/thumbnail-cat1.jpg\"))), mdx(\"p\", null, \"Once we know the Hexo-relative path to the input image and the output image,\\nwe have all the information necessary to resize the image.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":4}}},"pageContext":{"id":"ffaefb95-eaf6-5abe-92e7-634607f8e6a5","slug":"2018/04/23/lazy-image-resizing-in-hexo-image-sizes-v2","__params":{"slug":"2018"}}},
    "staticQueryHashes": []}