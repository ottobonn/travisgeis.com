{
    "componentChunkName": "component---src-pages-post-slug-tsx",
    "path": "/2022/01/16/programming-samd11/",
    "result": {"data":{"post":{"slug":"2022/01/16/programming-samd11","title":"Programming the ATSAMD11C14 with Black Magic Probe","date":"16 January 2022","parent":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Programming the ATSAMD11C14 with Black Magic Probe\",\n  \"date\": \"2022-01-16T15:18:25.000Z\",\n  \"tags\": null,\n  \"lede\": \"Maybe an unusual pairing? It took me about 50 Google searches to get a first program to run.\",\n  \"project\": \"Bike Tail Light\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\\u2019m working on a new tail light for my bike, to get back into electronics. It\\u2019s a custom circuit board design with a microntroller. There\\u2019s still a global chip shortage, but I managed to find some ATSAMD11 microcontrollers to base my design on.\"), mdx(\"p\", null, \"The SAMD11 is the small sibling of the popular SAMD21 and SAMD51 chips, and it seems less popular among hobbyists based on how thin the documentation is. I had trouble finding straightforward information on how to program it, especially because I am using the Black Magic Probe instead of OpenOCD to do so.\"), mdx(\"p\", null, \"Here\\u2019s my simple \\u201Cblink\\u201D sketch that toggles Arduino pin 4 (which happens to be pin 14 of this chip) to prove that something is happening:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"c++\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-c++ line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++\"\n  }, \"const unsigned int LED_PIN = 4;\\nvoid setup() {\\n  pinMode(LED_PIN, OUTPUT);\\n}\\n\\nvoid loop() {\\n  digitalWrite(LED_PIN, HIGH);\\n  delay(10);\\n  digitalWrite(LED_PIN, LOW);\\n  delay(10);\\n}\"), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"I\\u2019m observing the pin with an oscilloscope, but you could increase those delay times to make it blink at a more human-readable pace if you use an LED.\"), mdx(\"p\", null, \"Here are the steps I used to get this first LED-blinking program on to the chip:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install the Mattairtech SAMD cores for Arduino. These include the pin definitions and SAMD standard library so we can call Arduino functions.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"gdb-multiarch\"), \". The Black Magic Probe hosts a GDB server, so we\\u2019ll program and debug the circuit with GDB.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Build the sketch with these options & note the path of the created ELF file:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Board: \\u201CGeneric D11C14A\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clock source: \\u201CInternal USB-Calibrated Oscillator\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"USB Config: \\u201CCDC Only\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Serial Config: \\u201COne UART, No Wire, One SPI\\u201D (probably not important right now)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bootloader size: \\u201CNo Bootloader\\u201D (this part is important until we have a bootloader)\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Program the chip using the Black Magic Probe and GDB, using the path of the compiled ELF file:\", mdx(\"div\", {\n    parentName: \"li\",\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"gdb-multiarch \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"\\\\\"), \"\\n  -ex \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"target extended-remote /dev/ttyACM0\\\"\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"\\\\\"), \"\\n  -ex \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"monitor swdp_scan\\\"\"), \" -ex \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"attach 1\\\"\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"\\\\\"), \"\\n  -ex \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"monitor erase mass\\\"\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"\\\\\"), \"\\n  -ex \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"load /tmp/arduino_build_520906/tail-light.ino.elf\\\"\")), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"p\", null, \"If all of that works, the output looks something like the following:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Remote debugging using /dev/ttyACM0\\nTarget voltage: 3.2V\\nAvailable Targets:\\nNo. Att Driver\\n 1      Atmel SAMD11D14A (rev B)\\nAttaching to Remote target\\nwarning: No executable has been specified and target does not support\\ndetermining executable automatically.  Try using the \\\"file\\\" command.\\n0x00000250 in ?? ()\\nErase successful!\\nLoading section .text, size 0x2300 lma 0x0\\nLoading section .data, size 0x160 lma 0x2300\\nStart address 0x00000184, load size 9312\\nTransfer rate: 18 KB/sec, 846 bytes/write.\"), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"That programming step will drop you in to the GDB prompt. Next, we need to start the program. These commands go into the GDB prompt:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tell GDB which file we\\u2019re running: \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"file /tmp/arduino_build_520906/tail-light.ino.elf\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"start\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"continue\"))), mdx(\"p\", null, \"With that, the program will start and move past the temporary initial breakpoint. The pin should start to blink!\"), mdx(\"p\", null, \"Up next, I will be combining these steps into a single command so I can add it to the Arduino IDE. After that, I will progam a bootloader to this chip so I can upload things over USB.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1}}},"pageContext":{"id":"093db5e4-2b29-57ed-a6db-8b21e83acdf8","slug":"2022/01/16/programming-samd11","__params":{"slug":"2022"}}},
    "staticQueryHashes": []}