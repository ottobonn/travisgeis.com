{
    "componentChunkName": "component---src-pages-project-slug-tsx",
    "path": "/projects/stl-viewer/",
    "result": {"data":{"project":{"id":"STL Viewer","name":"STL Viewer","fields":{"posts":[{"id":"c278d5de-edfb-5c52-9aa6-fc887feab3ff","slug":"2021/05/23/stl-viewer","title":"STL Viewer Custom HTML Element","lede":"A 3D STL viewer for showing off 3D printer models on the blog.","date":"23 May 2021","rawDate":"2021-05-23T00:00:00.000Z","path":"/2021/05/23/stl-viewer/","parent":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"STL Viewer Custom HTML Element\",\n  \"date\": \"2021-05-25T20:16:00.000Z\",\n  \"tags\": null,\n  \"lede\": \"A 3D STL viewer for showing off 3D printer models on the blog.\",\n  \"project\": \"STL Viewer\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"stl-viewer\", {\n    model: \"/stl-viewer/example.stl\"\n  })), mdx(\"p\", null, \"I made this little \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ottobonn/stl-viewer\"\n  }, \"STL viewer\"), \" to show off the 3D models I have been making to print. Click and drag to change the view!\"), mdx(\"p\", null, \"The model shown here is a plastic bracket to hold an LED bar in a greenhouse cabinet.\"), mdx(\"p\", null, \"It\\u2019s implemented as an HTML custom element. I haven\\u2019t used them before and it was pretty simple to make, and I think the best part is how streamlined it is to use:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"html\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-html line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token tag\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token tag\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"<\"), \"stl-viewer\"), \" \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token attr-name\"\n  }, \"model\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token attr-value\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation attr-equals\"\n  }, \"=\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"\\\"\"), \"/stl-viewer/example.stl\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"\\\"\")), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \">\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token tag\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token tag\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"</\"), \"stl-viewer\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \">\"))), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\"\n  }, \"custom element spec\"), \" lets you add your own attributes to the elements, like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"model\"), \" in this example. I found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://alligator.io/web-components/attributes-properties/\"\n  }, \"this article\"), \" helpful in showing practical examples.\"), mdx(\"p\", null, \"Find it on GitHub \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ottobonn/stl-viewer\"\n  }, \"here\"), \"!\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1}}]}}},"pageContext":{"id":"STL Viewer","slug":"/projects/stl-viewer","__params":{"slug":"projects"}}},
    "staticQueryHashes": []}